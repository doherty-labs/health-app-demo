"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from ast import literal_eval
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p9s3h@$1k6gs4uj!qyp$^9f6nttydour71(cq5=83ti(j1r*s4"
TESTING = "test" in sys.argv
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = literal_eval(os.environ.get("DEBUG_MODE", "True"))

ALLOWED_HOSTS = literal_eval(os.environ.get("ALLOWED_HOST", "['*']"))
CORS_ALLOWED_ORIGINS = literal_eval(
    os.environ.get("CORS_ALLOWED_ORIGINS", "['http://localhost:3000']")
)


# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "django_celery_beat",
    "corsheaders",
    "rest_api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "django.contrib.auth.backends.RemoteUserBackend",
]

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"
ASGI_APPLICATION = "django_project.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DATABASE_NAME", "maindb"),
        "USER": os.environ.get("DATABASE_USER", "admin_user"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", "password123*"),
        "HOST": os.environ.get("DATABASE_HOST", "localhost"),
        "PORT": os.environ.get("DATABASE_PORT", "5432"),
    }
}

ELASTIC_SEARCH = {
    "host": os.environ.get("ELASTIC_SEARCH_HOST", "localhost"),
    "port": 9200,
    "user": os.environ.get("ELASTIC_SEARCH_USER", ""),
    "password": os.environ.get("ELASTIC_SEARCH_PASSWORD", ""),
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_URL",
    "redis://localhost:6379/0",
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERYD_HIJACK_ROOT_LOGGER = False

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.environ.get("CHANNELS_URLS", "redis://localhost:6379/0"))],
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("CHANNELS_URLS", "redis://localhost:6379/0"),
    }
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
}

GMAPS_API_KEY = os.environ.get("GMAPS_API_KEY", "")
MAILGUN_API_KEY = os.environ.get("MAILGUN_API_KEY", "")
MAILGUN_DOMAIN = os.environ.get("MAILGUN_DOMAIN", "")

BUCKET_NAME = os.environ.get("BUCKET_NAME", "")
BUCKET_USERNAME = os.environ.get("BUCKET_USERNAME", "")
BUCKET_KEY = os.environ.get("BUCKET_KEY", "")
BUCKET_SECRET = os.environ.get("BUCKET_SECRET", "")
BUCKET_ENDPOINT = os.environ.get("BUCKET_ENDPOINT", "")
BUCKET_REGION = os.environ.get("BUCKET_REGION", "uk")

LOGIN_URL = "/admin/login/"
AUTH0_DOMAIN = os.environ.get("AUTH_DOMAIN", "")
AUTH0_IDENTIFIER = os.environ.get("AUTH_IDENTIFIER", "")
AUTH0_STAFF_APP_CLIENT_ID = os.environ.get("AUTH0_STAFF_APP_CLIENT_ID", "")
AUTH0_CUSTOMER_APP_CLIENT_ID = os.environ.get("AUTH0_CUSTOMER_APP_CLIENT_ID", "")
AUTH0_STAFF_APP_CONNECTION_ID = os.environ.get("AUTH0_STAFF_APP_CONNECTION_ID", "")
AUTH0_M2M_CLIENT_ID = os.environ.get("AUTH0_M2M_CLIENT_ID", "")
AUTH0_M2M_CLIENT_SECRET = os.environ.get("AUTH0_M2M_CLIENT_SECRET", "")
AUTH0_STAFF_ROLE_ID = os.environ.get("AUTH0_STAFF_ROLE_ID", "")
AUTH0_PATIENT_ROLE_ID = os.environ.get("AUTH0_PATIENT_ROLE_ID", "")

JWT_AUTH = {
    "JWT_PAYLOAD_GET_USERNAME_HANDLER": "django_project.auth_utils.jwt_get_username_from_payload_handler",
    "JWT_DECODE_HANDLER": "django_project.auth_utils.jwt_decode_token",
    "JWT_ALGORITHM": "RS256",
    "JWT_AUDIENCE": AUTH0_IDENTIFIER,
    "JWT_ISSUER": AUTH0_DOMAIN,
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}

OTLP_ENDPOINT = os.environ.get("OTEL_EXPORTER_OTLP_ENDPOINT", "")
OTLP_IS_SECURE = os.environ.get("OTLP_IS_SECURE", False)
OTEL_SERVICE_NAME = os.environ.get("OTEL_SERVICE_NAME", "")
DD_ENV = os.environ.get("DD_ENV", "")
DD_VERSION = os.environ.get("DD_VERSION", "")

if not DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "directlogging": {
                "level": "WARNING",
                "class": "django_project.logging_handler.DirectWriteLoggingHandler",
            },
        },
        "loggers": {
            "root": {
                "handlers": [
                    "directlogging",
                ],
                "level": "WARNING",
                "propagate": True,
            },
        },
    }
